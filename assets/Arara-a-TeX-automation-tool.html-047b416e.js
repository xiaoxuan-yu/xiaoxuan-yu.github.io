import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o as c,c as i,b as e,d as a,e as o,a as n}from"./app-eb97a764.js";const r={},t=n(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p><code>Arara</code> 是一个用于自动化构建 LaTeX 文档的辅助工具，使用 Kotlin 编写。功能上，<code>Arara</code> 类似于 <code>latexmk</code> 或者 <code>rubber</code>，在设计理念上和以上两者却存在相当的区别。可以举一个简单的例子简要说明这一点：</p><div class="language-latex line-numbers-mode" data-ext="latex"><pre class="language-latex"><code><span class="token comment">% hello.tex</span>
<span class="token function selector">\\documentclass</span><span class="token punctuation">{</span><span class="token keyword">article</span><span class="token punctuation">}</span>

<span class="token function selector">\\begin</span><span class="token punctuation">{</span><span class="token keyword">document</span><span class="token punctuation">}</span>
Hello world!
<span class="token function selector">\\end</span><span class="token punctuation">{</span><span class="token keyword">document</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若使用 <code>latexmk</code> 或 <code>rubber</code> 只需要执行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>latexmk <span class="token parameter variable">-pdf</span> hello.tex
rubber <span class="token parameter variable">-pdf</span> hello.tex
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>就能直接完成编译工作，这些工具会自动分析文件以决定如何进行文档的构建。而 <code>Arara</code> 则给出另外的结果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>arara hello.tex
  __ _ _ __ __ _ _ __ __ _
 / _\` | &#39;__/ _\` | &#39;__/ _\` |
| (_| | | | (_| | | | (_| |
 \\__,_|_|  \\__,_|_|  \\__,_|

Processing &quot;hello.tex&quot; (size: 70 B, last modified: 12/28/2020 23:29:16), please wait.

  ERROR

It looks like no directives were found in the provided file. Make
sure to include at least one directive and try again.

Total: 0.04 seconds
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>事实上，<code>Arara</code> 会直接报告错误。这完全是经过设计的行为，因为 <code>Arara</code> 不会进行任何猜测，所以使用时需要向它传递清晰的指令：你希望它为你做什么。为此，可以通过在文件中添加一些特殊的注释，以告知 <code>Arara</code> 如何构建文档：</p><div class="language-latex line-numbers-mode" data-ext="latex"><pre class="language-latex"><code><span class="token comment">% hello.tex</span>
<span class="token comment">% arara: pdflatex</span>
<span class="token function selector">\\documentclass</span><span class="token punctuation">{</span><span class="token keyword">article</span><span class="token punctuation">}</span>

<span class="token function selector">\\begin</span><span class="token punctuation">{</span><span class="token keyword">document</span><span class="token punctuation">}</span>
Hello world!
<span class="token function selector">\\end</span><span class="token punctuation">{</span><span class="token keyword">document</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些注释被称为指令。此时，再次执行 <code>arara hello.tex</code>，就能得到正确的结果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ arara hello.tex
  __ _ _ __ __ _ _ __ __ _
 / _\` | &#39;__/ _\` | &#39;__/ _\` |
| (_| | | | (_| | | | (_| |
 \\__,_|_|  \\__,_|_|  \\__,_|

Processing &quot;hello.tex&quot; (size: 88 B, last modified: 12/28/2020 23:30:25), please wait.

(PDFLaTeX) PDFLaTeX engine .............................. SUCCESS

Total: 0.56 seconds
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="指令与规则" tabindex="-1"><a class="header-anchor" href="#指令与规则" aria-hidden="true">#</a> 指令与规则</h2><p>仅仅有像源代码添加的指令是不足以完成构建工作的，还需要告知 <code>Arara</code> 如何执行这些指令。这就需要使用规则。规则规定了任务是如何完成的，而指令则决定了在当前文档上这些任务应该如何执行以完成构建工作。<code>Arara</code> 指令通常独立成行，以注释 (在 TeX 中以百分号表示) 开始，此后跟随 <code>arara:</code> 和任务名称，如</p><div class="language-latex line-numbers-mode" data-ext="latex"><pre class="language-latex"><code><span class="token comment">% arara: pdflatex</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意这里的 <code>pdflatex</code> 并非要执行的命令，而是 <code>Arara</code> 中的一个任务名称。一旦 <code>Arara</code> 找到一个指令，它将寻找相关的规则。在我们的示例中，它将查找名为 <code>pdflatex</code> 的规则，该规则显然将运行 pdflatex 命令行应用程序。规则在以其标识符命名的 YAML 文件中定义，其结构将于接下来的部分中描述。</p><h3 id="规则" tabindex="-1"><a class="header-anchor" href="#规则" aria-hidden="true">#</a> 规则</h3><p>规则定义域 YAML 文件中，以 <code>yaml</code> 为拓展名 (尽管 <code>yml</code> 也是常用的但并不被支持)，其主要包含如下部分</p><ul><li><code>!config</code> ：任何规则文件都应该以 <code>!config</code> 标记开始，以便 <code>Arara</code> 能够识别它们</li><li><code>identifier</code> ：规则的标识符，用于在指令中引用规则，通常应当使用不带空格、重音符号或者标点符号的小写字母</li><li><code>name</code> ：规则的名称，用于输出</li><li><code>authors</code> ：规则的作者 (可选)</li><li><code>commands</code> ：规则的命令列表，每个命令被视为一个子任务，一个任务可以包含一个或多个子任务 <ul><li><code>name</code> ：子任务的名称，用于输出；</li><li><code>command</code> ：子任务执行的命令，应当是如下两种值中的一种或它们混合的列表 <ul><li><code>Command</code> 对象，如</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token string">&quot;@{ return getCommand(&#39;ls&#39;) }&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>布尔值：可以通过规则上下文提供的脚本语言来编写代码，此时计算由 <code>Arara</code> 本身完成，因此不会执行命令，只需要返回一个布尔值</li></ul></li><li><code>exit</code>：子任务的退出状态</li></ul></li><li><code>arguments</code>：任务的参数列表 (如果有的话)，注意即使没有参数也需要指定一个空列表 <ul><li><code>identifier</code>：参数的标识符，用于在指令中引用参数 (<code>files</code> 和 <code>reference</code> 是保留字，不能用作参数标识符)</li><li><code>flag</code>：报讯一个字符串，用于在指令上下文定义相应的参数时进行计算并将结果存储用于 <code>command</code> 部分的访问</li><li><code>default</code>：参数的默认值</li><li><code>required</code>：布尔值，指示参数是否是必需的</li></ul></li></ul><h4 id="预定义的规则" tabindex="-1"><a class="header-anchor" href="#预定义的规则" aria-hidden="true">#</a> 预定义的规则</h4>`,19),u=e("code",null,"Arara",-1),p={href:"https://islandoftex.gitlab.io/arara/manual/rules/",target:"_blank",rel:"noopener noreferrer"},m=e("code",null,"Arara",-1),v=n(`<ul><li><code>xelatex</code> (其他引擎相关的规则类似) <ul><li><code>shell</code>： 是否使用 <code>--shell-escape</code></li><li><code>synctex</code>：是否使用 <code>--synctex=1</code></li><li><code>interaction</code>：交互模式，可选值为 <code>batchmode</code>、<code>nonstopmode</code>、<code>scrollmode</code> 和 <code>errorstopmode</code></li><li><code>options</code>：其他选项</li></ul></li><li><code>biber</code></li><li><code>clean</code><ul><li><code>extensions</code>：要清理的文件扩展名列表</li></ul></li><li><code>indent</code></li><li><code>copy</code></li></ul><h3 id="指令" tabindex="-1"><a class="header-anchor" href="#指令" aria-hidden="true">#</a> 指令</h3><p>指令是插入到源文件中的一个特殊注释，用于指示 <code>Arara</code> 应该如何行事。默认情况下，该工具将从文件的开头读取和提取指令。<code>Arara</code> 中的指令通常有两种：</p><ul><li>空指令：只有规则名称，所有参数映射到空列表 (除去有 <code>default</code> 值的参数)，如</li></ul><div class="language-latex line-numbers-mode" data-ext="latex"><pre class="language-latex"><code><span class="token comment">% arara: pdflatex</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>带有参数的指令：除去有规则名外，这类指令还有参数，如</li></ul><div class="language-latex line-numbers-mode" data-ext="latex"><pre class="language-latex"><code><span class="token comment">% arara: pdflatex: { shell: yes }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>有时，指令可以跨行，此时应当使用 <code>arara: --&gt;</code> 标记将其分割，如</p><div class="language-latex line-numbers-mode" data-ext="latex"><pre class="language-latex"><code><span class="token comment">% arara: pdflatex{</span>
<span class="token comment">% arara: --&gt; shell: yes</span>
<span class="token comment">% arara: --&gt; synctex: yes</span>
<span class="token comment">% arara: --&gt; }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="条件" tabindex="-1"><a class="header-anchor" href="#条件" aria-hidden="true">#</a> 条件</h4><p><code>Arara</code> 提供了用 MVEL 语言编写的逻辑表达式，以及在运行时处理的特殊运算符，以确定是否以及如何处理指令。这个特性被命名为指令条件，或者简称为条件。例如</p><div class="language-latex line-numbers-mode" data-ext="latex"><pre class="language-latex"><code><span class="token comment">% arara: pdflatex if missing(&#39;pdf&#39;) || changed(&#39;tex&#39;)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可用的条件列于下面的列表中：</p><ul><li><code>if</code></li><li><code>until</code></li><li><code>unless</code></li><li><code>while</code></li></ul><h2 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件" aria-hidden="true">#</a> 配置文件</h2><p><code>Arara</code> 将依次查找以下配置文件，以确定工作所需的配置：<code>.araraconfig.yaml → araraconfig.yaml → .arararc.yaml → arararc.yaml</code>。</p><ul><li>全局配置文件<br> 此类配置文件应当被放置于 <code>HOME</code> 下，所有随后执行的 <code>Ararat</code> 任务都将使用这个配置文件。然而，其优先级最低。</li><li>项目配置文件<br> 此类配置文件应当被放置于项目工作目录下，所有随后执行的 <code>Ararat</code> 任务都将使用这个配置文件。但是，<code>Arara</code> 必须在工作目录内执行，否则本地配置文件查找将失败。请注意，这种方法具有最高的查找优先级，这意味着它将始终取代全局配置。</li></ul><h3 id="配置文件的结构" tabindex="-1"><a class="header-anchor" href="#配置文件的结构" aria-hidden="true">#</a> 配置文件的结构</h3><p>配置文件中常用的参数如下：</p><ul><li><code>!config</code> ：任何配置文件都应该以 <code>!config</code> 标记开始，以便 <code>Arara</code> 能够识别它们</li><li><code>paths</code> ：路径列表，用于指定 <code>Arara</code> 应该在哪里查找规则文件。当查找规则时，<code>Arara</code> 总是搜索默认的规则路径如果未找到规则，则执行会因错误而停止。 <code>paths</code> 键指定一个目录列表，表示为普通字符串，指定了 <code>Arara</code> 应该在该列表中搜索规则。默认路径被追加到列表中。然后按顺序搜索从第一个到最后一个元素。例如</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">paths</span><span class="token punctuation">:</span>
<span class="token punctuation">-</span> <span class="token string">&#39;/home/username/.arara/rules&#39;</span>
<span class="token punctuation">-</span> <span class="token string">&#39;/home/username/.arara/custom&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>paths</code> 中有几个可用的变量，描述如下</p><ul><li><code>user.home</code>：以字符串的形式保存当前用户的主目录的绝对规范路径</li><li><code>user.name</code>：以字符串的形式保存当前用户的用户名</li><li><code>application.workingDirectory</code>：以字符串的形式保存当前工作目录的绝对规范路径</li><li><code>language</code>：此键值根据提供的语言代码设置 <code>Arara</code> 后续执行使用的语言，注意这项设置会被命令行选项 <code>--language</code> 覆盖</li><li><code>loop</code>：此键值规定 <code>Arara</code> 允许的可能的最大循环次数，注意这项设置会被命令行选项 <code>--max-loops</code> 覆盖</li><li><code>verbose</code>：此键值规定 <code>Arara</code> 是否使用详细模式作为默认模式，它会被 <code>--verbose</code> 命令行选项覆盖和被 <code>--silent</code> 选项重写</li><li><code>logging</code>：此键激活或停用 arara 的日志特性作为默认行为，它会被 <code>--log</code> 命令行选项重写</li><li><code>header</code>：此键值规定 <code>Arara</code> 是否只从文件开头提取指令，它会被 <code>--whole-file</code> 命令行选项重写</li><li><code>logname</code>：此键值规定 <code>Arara</code> 日志文件的名称</li><li><code>preambles</code>：此键保存包含预定义序言的字符串映射，以便以后与 <code>--preamble</code> 选项一起使用，如</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">preambles</span><span class="token punctuation">:</span>
  <span class="token key atrule">twopdflatex</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
    % arara: pdflatex
    % arara: pdflatex</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>defaultPreambles</code>：此键值制定了在文件中和命令行中都没有指定指令和序言的情况下，<code>Arara</code> 应该使用的默认序言</li><li><code>prependPreambleIfDirectivesGiven</code>：此键允许指定一个布尔值，该值指示序言应该应用于所有文件还是仅应用于那些没有指令的文件。</li><li><code>filetypes</code>：此键指定 <code>Arara</code> 在搜索文件名时支持的文件类型列表和相应的指令查找方式 <ul><li><code>extensions</code>：此键值指定文件扩展名列表</li><li><code>pattern</code>：此键值指定文件名模式</li></ul></li></ul>`,25);function b(h,_){const d=s("ExternalLinkIcon");return c(),i("div",null,[t,e("p",null,[u,a(" 附带了一些预定义的规则。这些规则可以直接使用，也可以作为模板来创建自己的规则。具体可以参考 "),e("a",p,[m,a(" 文档的相关部分"),o(d)]),a("，这里列出一些常用的规则和常用选项：")]),v])}const k=l(r,[["render",b],["__file","Arara-a-TeX-automation-tool.html.vue"]]);export{k as default};
